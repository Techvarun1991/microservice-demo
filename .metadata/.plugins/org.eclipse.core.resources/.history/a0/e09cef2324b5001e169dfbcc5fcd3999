package com.example.serviceImplementation;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.dto.BookScheduleRequestDto;
import com.example.dto.DoctorScheduleRequest;
import com.example.dto.ScheduleRequestDTO;
import com.example.entity.DoctorSchedule;
import com.example.exception.ScheduleNotFoundException;
import com.example.exception.ScheduleServiceException;
import com.example.repo.ScheduleRepository;

@Service
public class ScheduleServiceImplementation {

    @Autowired
    private ScheduleRepository doctorScheduleRepository;

    private static final Logger logger = LoggerFactory.getLogger(ScheduleServiceImplementation.class);

    public void saveSchedules(List<ScheduleRequestDTO> scheduleDTOs) throws ScheduleServiceException {
        try {
            List<DoctorSchedule> schedules = scheduleDTOs.stream()
                    .map(this::mapToEntity)
                    .collect(Collectors.toList());

            doctorScheduleRepository.saveAll(schedules);
            logger.info("Schedules saved successfully.");
        } catch (Exception e) {
            logger.error("Error saving schedules: {}", e.getMessage(), e);
            throw new ScheduleServiceException("Error saving schedules", e);
        }
    }

    private DoctorSchedule mapToEntity(ScheduleRequestDTO scheduleDTO) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            DoctorSchedule schedule = new DoctorSchedule();
            schedule.setDate(LocalDate.parse(scheduleDTO.getDate(), formatter));
            schedule.setTimeSlots(scheduleDTO.getTimeSlots());
            schedule.setDoctorId(scheduleDTO.getDoctorId());
            schedule.setOnlineMode(scheduleDTO.isOnlineMode());
            schedule.setClinicId(scheduleDTO.getClinicId());
            schedule.setSlotDuration(scheduleDTO.getSlotDuration());
            return schedule;
    }

    public List<DoctorSchedule> getDoctorSchedule(Long doctorId) throws ScheduleServiceException {
        try {
            List<DoctorSchedule> doctorSchedules = doctorScheduleRepository.findByDoctorId(doctorId);
            logger.info("Doctor's schedules fetched successfully.");
            return doctorSchedules;
        } catch (Exception e) {
            logger.error("Error getting doctor's schedule: {}", e.getMessage(), e);
            throw new ScheduleServiceException("Error getting doctor's schedule", e);
        }
    }

    public DoctorSchedule getDoctorScheduleByDate(DoctorScheduleRequest request) throws ScheduleServiceException {
        try {
            Optional<DoctorSchedule> optionalSchedule = doctorScheduleRepository.findByDoctorIdAndDateAndOnlineMode(
                    request.getDoctorId(), request.getDate(), request.isOnlineMode());

            if (optionalSchedule.isPresent()) {
                DoctorSchedule schedule = optionalSchedule.get();
                logger.info("Doctor's schedule by date fetched successfully.");
                // You may need to convert the entity to a DTO based on your requirements
                return schedule;
            } else {
                logger.info("Doctor's schedule by date not found.");
                return null; // Schedule not found
            }
        } catch (Exception e) {
            logger.error("Error getting doctor's schedule by date: {}", e.getMessage(), e);
            throw new ScheduleServiceException("Error getting doctor's schedule by date", e);
        }
    }

    public List<DoctorSchedule> getDoctorSchedulesInDateRange(Long doctorId, LocalDate startDate, LocalDate endDate) throws ScheduleServiceException {
        try {
            List<DoctorSchedule> doctorSchedules = doctorScheduleRepository.findByDoctorIdAndDateBetween(doctorId, startDate, endDate);
            logger.info("Doctor's schedules in date range fetched successfully.");
            return doctorSchedules;
        } catch (Exception e) {
            logger.error("Error getting doctor's schedules in date range: {}", e.getMessage(), e);
            throw new ScheduleServiceException("Error getting doctor's schedules in date range", e);
        }
    }

    public boolean bookSlot(BookScheduleRequestDto dto) throws ScheduleServiceException {
        try {
            DoctorSchedule optionalSchedule = doctorScheduleRepository
                    .findByDoctorIdAndDateAndOnlineMode(dto.getDoctorId(), dto.getDate(), dto.isOnlineMode())
                    .orElseThrow(() -> {
                        logger.info("Doctor's schedule for booking not found.");
                        return new ScheduleNotFoundException("Schedule not found");
                    });

            Map<String, Boolean> map = optionalSchedule.getTimeSlots();
            map.computeIfPresent(dto.getTime(), (k, v) -> dto.isValue());
            optionalSchedule.setTimeSlots(map);
            doctorScheduleRepository.save(optionalSchedule);
            logger.info("Slot booked successfully.");
            return true;
        } catch (Exception e) {
            logger.error("Error booking slot: {}", e.getMessage(), e);
            throw new ScheduleServiceException("Error booking slot", e);
        }
    }
}

