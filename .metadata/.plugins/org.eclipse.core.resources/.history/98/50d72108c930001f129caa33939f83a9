package com.example.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector;
import org.springframework.security.config.Customizer;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	private final CustomOpaqueTokenIntrospector customOpaqueTokenIntrospector;

    public SecurityConfig(CustomOpaqueTokenIntrospector customOpaqueTokenIntrospector) {
        this.customOpaqueTokenIntrospector = customOpaqueTokenIntrospector;
    }
    
	@Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable());
        
        http.authorizeHttpRequests(authorize -> authorize
//                .requestMatchers("/api/users/**").permitAll()  // Allow unauthenticated access to user-related endpoints
                .anyRequest().authenticated());
        
        http.oauth2ResourceServer(oauth2 -> oauth2.opaqueToken(opaqueToken -> {
                opaqueToken.introspector(customOpaqueTokenIntrospector);
            }));
        
        http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        return http.build();
    }
}




