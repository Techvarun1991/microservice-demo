package com.example.keyclockClient;

import java.util.ArrayList;
import java.util.List;

import org.keycloak.admin.client.Keycloak;
import org.keycloak.common.util.CollectionUtil;
import org.keycloak.representations.idm.CredentialRepresentation;
import org.keycloak.representations.idm.UserRepresentation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.dto.User;
import com.example.security.KeycloakSecurityUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;


@RestController
@RequestMapping("/user")
public class UserResource {

	@Autowired
	private KeycloakSecurityUtils keycloakSecurityUtils;
	
	@Value("$(realm-name)")
	private String realm;
	
	@GetMapping()
	public List<User> getAllUsers() {
		Keycloak keycloak = keycloakSecurityUtils.getKeycloakInstance();
		List<UserRepresentation> userRepresentations = keycloak.realm(realm).users().list();
		
		return mapUsers(userRepresentations);
		
	}
	
	@PostMapping
	public ResponseEntity<User> createUser(@RequestBody User user) {
		//TODO: process POST request
		UserRepresentation userRep = mapUserRep(user);
		Keycloak keycloak = keycloakSecurityUtils.getKeycloakInstance();
		keycloak.realm(realm).users().create(userRep);
		
		return ResponseEntity.ok(user);
	}
	
	
	
	private List<User> mapUsers(List<UserRepresentation> list){
		List<User> users = new ArrayList<>();
		if(CollectionUtil.isNotEmpty(list)) {
			list.forEach(userRep -> {
				users.add(mapUser(userRep));
			});
		}
		return users;
	}
	
	private User mapUser(UserRepresentation userRep) {
		User user = new User();
		
		user.setFirstName(userRep.getFirstName());
		user.setLastName(userRep.getLastName());
		user.setUserName(userRep.getUsername());
		user.setEmail(userRep.getEmail());
		
		return user;
		
	}
	
	private UserRepresentation mapUserRep(User user) {
		UserRepresentation userRep = new UserRepresentation();
		
		userRep.setUsername(user.getUserName());
		userRep.setFirstName(user.getFirstName());
		userRep.setLastName(user.getLastName());
		userRep.setEmail(user.getEmail());
		userRep.setEnabled(true);
		userRep.setEmailVerified(true);
		List<CredentialRepresentation> creds = new ArrayList<>();
		CredentialRepresentation cred = new CredentialRepresentation();
		cred.setTemporary(false);
		cred.setValue(user.getPassword());
		creds.add(cred);
		userRep.setCredentials(creds);
		return userRep;
		
	}
	
}
